// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module expand_mat_expand_mat_Pipeline_VITIS_LOOP_390_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        t_address0,
        t_ce0,
        t_q0,
        t_address1,
        t_ce1,
        t_q1,
        t_address2,
        t_ce2,
        t_q2,
        t_address3,
        t_ce3,
        t_q3,
        t_address4,
        t_ce4,
        t_q4,
        t_address5,
        t_ce5,
        t_q5,
        t_address6,
        t_ce6,
        t_q6,
        t_address7,
        t_ce7,
        t_q7,
        s_address0,
        s_ce0,
        s_we0,
        s_d0,
        s_address1,
        s_ce1,
        s_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] t_address0;
output   t_ce0;
input  [7:0] t_q0;
output  [7:0] t_address1;
output   t_ce1;
input  [7:0] t_q1;
output  [7:0] t_address2;
output   t_ce2;
input  [7:0] t_q2;
output  [7:0] t_address3;
output   t_ce3;
input  [7:0] t_q3;
output  [7:0] t_address4;
output   t_ce4;
input  [7:0] t_q4;
output  [7:0] t_address5;
output   t_ce5;
input  [7:0] t_q5;
output  [7:0] t_address6;
output   t_ce6;
input  [7:0] t_q6;
output  [7:0] t_address7;
output   t_ce7;
input  [7:0] t_q7;
output  [4:0] s_address0;
output   s_ce0;
output   s_we0;
output  [63:0] s_d0;
output  [4:0] s_address1;
output   s_ce1;
input  [63:0] s_q1;

reg ap_idle;
reg t_ce0;
reg t_ce1;
reg t_ce2;
reg t_ce3;
reg t_ce4;
reg t_ce5;
reg t_ce6;
reg t_ce7;
reg s_ce0;
reg s_we0;
reg s_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln390_fu_176_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [4:0] s_addr_reg_365;
reg   [4:0] s_addr_reg_365_pp0_iter1_reg;
wire   [63:0] xor_ln391_fu_308_p2;
reg   [63:0] xor_ln391_reg_371;
wire   [63:0] zext_ln29_fu_201_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln29_1_fu_212_p1;
wire   [63:0] zext_ln29_2_fu_223_p1;
wire   [63:0] zext_ln29_3_fu_234_p1;
wire   [63:0] zext_ln29_4_fu_245_p1;
wire   [63:0] zext_ln29_5_fu_256_p1;
wire   [63:0] zext_ln29_6_fu_267_p1;
wire   [63:0] zext_ln29_7_fu_278_p1;
wire   [63:0] i_5_cast7_fu_188_p1;
reg   [4:0] i_fu_50;
wire   [4:0] add_ln390_fu_182_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_2;
wire   [7:0] shl_ln_fu_193_p3;
wire   [7:0] or_ln29_fu_206_p2;
wire   [7:0] or_ln29_1_fu_217_p2;
wire   [7:0] or_ln29_2_fu_228_p2;
wire   [7:0] or_ln29_3_fu_239_p2;
wire   [7:0] or_ln29_4_fu_250_p2;
wire   [7:0] or_ln29_5_fu_261_p2;
wire   [7:0] or_ln29_6_fu_272_p2;
wire   [63:0] r_1_7_fu_288_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

expand_mat_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln390_fu_176_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_50 <= add_ln390_fu_182_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        s_addr_reg_365_pp0_iter1_reg <= s_addr_reg_365;
        xor_ln391_reg_371 <= xor_ln391_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln390_fu_176_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_addr_reg_365 <= i_5_cast7_fu_188_p1;
    end
end

always @ (*) begin
    if (((icmp_ln390_fu_176_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_ce0 = 1'b1;
    end else begin
        s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_ce1 = 1'b1;
    end else begin
        s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_we0 = 1'b1;
    end else begin
        s_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_ce0 = 1'b1;
    end else begin
        t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_ce1 = 1'b1;
    end else begin
        t_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_ce2 = 1'b1;
    end else begin
        t_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_ce3 = 1'b1;
    end else begin
        t_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_ce4 = 1'b1;
    end else begin
        t_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_ce5 = 1'b1;
    end else begin
        t_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_ce6 = 1'b1;
    end else begin
        t_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_ce7 = 1'b1;
    end else begin
        t_ce7 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln390_fu_182_p2 = (ap_sig_allocacmp_i_2 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_5_cast7_fu_188_p1 = ap_sig_allocacmp_i_2;

assign icmp_ln390_fu_176_p2 = ((ap_sig_allocacmp_i_2 == 5'd21) ? 1'b1 : 1'b0);

assign or_ln29_1_fu_217_p2 = (shl_ln_fu_193_p3 | 8'd2);

assign or_ln29_2_fu_228_p2 = (shl_ln_fu_193_p3 | 8'd3);

assign or_ln29_3_fu_239_p2 = (shl_ln_fu_193_p3 | 8'd4);

assign or_ln29_4_fu_250_p2 = (shl_ln_fu_193_p3 | 8'd5);

assign or_ln29_5_fu_261_p2 = (shl_ln_fu_193_p3 | 8'd6);

assign or_ln29_6_fu_272_p2 = (shl_ln_fu_193_p3 | 8'd7);

assign or_ln29_fu_206_p2 = (shl_ln_fu_193_p3 | 8'd1);

assign r_1_7_fu_288_p9 = {{{{{{{{t_q0}, {t_q1}}, {t_q2}}, {t_q3}}, {t_q4}}, {t_q5}}, {t_q6}}, {t_q7}};

assign s_address0 = s_addr_reg_365_pp0_iter1_reg;

assign s_address1 = i_5_cast7_fu_188_p1;

assign s_d0 = xor_ln391_reg_371;

assign shl_ln_fu_193_p3 = {{ap_sig_allocacmp_i_2}, {3'd0}};

assign t_address0 = zext_ln29_7_fu_278_p1;

assign t_address1 = zext_ln29_6_fu_267_p1;

assign t_address2 = zext_ln29_5_fu_256_p1;

assign t_address3 = zext_ln29_4_fu_245_p1;

assign t_address4 = zext_ln29_3_fu_234_p1;

assign t_address5 = zext_ln29_2_fu_223_p1;

assign t_address6 = zext_ln29_1_fu_212_p1;

assign t_address7 = zext_ln29_fu_201_p1;

assign xor_ln391_fu_308_p2 = (s_q1 ^ r_1_7_fu_288_p9);

assign zext_ln29_1_fu_212_p1 = or_ln29_fu_206_p2;

assign zext_ln29_2_fu_223_p1 = or_ln29_1_fu_217_p2;

assign zext_ln29_3_fu_234_p1 = or_ln29_2_fu_228_p2;

assign zext_ln29_4_fu_245_p1 = or_ln29_3_fu_239_p2;

assign zext_ln29_5_fu_256_p1 = or_ln29_4_fu_250_p2;

assign zext_ln29_6_fu_267_p1 = or_ln29_5_fu_261_p2;

assign zext_ln29_7_fu_278_p1 = or_ln29_6_fu_272_p2;

assign zext_ln29_fu_201_p1 = shl_ln_fu_193_p3;

endmodule //expand_mat_expand_mat_Pipeline_VITIS_LOOP_390_6
